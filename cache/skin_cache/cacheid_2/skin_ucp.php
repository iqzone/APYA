<?php
/*--------------------------------------------------*/
/* FILE GENERATED BY INVISION POWER BOARD 3         */
/* CACHE FILE: Skin set id: 2               */
/* CACHE FILE: Generated: Wed, 29 Aug 2012 14:15:00 GMT */
/* DO NOT EDIT DIRECTLY - THE CHANGES WILL NOT BE   */
/* WRITTEN TO THE DATABASE AUTOMATICALLY            */
/*--------------------------------------------------*/

class skin_ucp_2 extends skinMaster{

/**
* Construct
*/
function __construct( ipsRegistry $registry )
{
	parent::__construct( $registry );
	

$this->_funcHooks = array();
$this->_funcHooks['coreAttachments'] = array('attachmentThumbLocation','attachmentPost','attach','attachAlmostFull','hasAttachLimit','hasAttachments','attachmentMultiDelete');
$this->_funcHooks['displayNameForm'] = array('dnameOkMessage','dnameFbUser');
$this->_funcHooks['emailChangeForm'] = array('emailIsAdmin','passFbUser','emailIsNotAdmin','emailCaptcha');
$this->_funcHooks['field_entry'] = array('cfieldDesc');
$this->_funcHooks['membersAboutMeForm'] = array('disablelightbox');
$this->_funcHooks['membersFacebookConnect'] = array('fbShowStatus','fbSyncPic','fbSyncStatus','canUpdateStatus','fbSyncAboutMe','fbLastSync','fbDefaultEmail','fbMismatch','fbNoEmailWarning');
$this->_funcHooks['membersIgnoredUsersForm'] = array('ignoreMemberTopics','ignoreMemberPms','members');
$this->_funcHooks['membersProfileForm'] = array('monthSelected','months','daySelected','days','yearSelected','years','showComments','commentsNone','commentsEmail','commentsPm','noModComments','yesModComments','showFriends','friendsNone','friendsEmail','friendsPm','noModFriends','yesModFriends','friendsEnabled','showFriends','changeMemberTitle','birthdayFields','requiredCfields','optionalCfields');
$this->_funcHooks['membersSignatureForm'] = array('hasSignatureLimits','disablelightbox');
$this->_funcHooks['notificationsLog'] = array('categories','hasconfirm','hasnotifyerror','hasNotifyForMod');
$this->_funcHooks['passwordChangeForm'] = array('changePasswordAdmin','changePasswordNotAdmin');


}

/* -- coreAttachments --*/
function coreAttachments($info="",$pages="",$attachments) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['coreAttachments'] ) )
{
$count_a1b4e15e508214588b83890fbaeff847 = is_array($this->functionData['coreAttachments']) ? count($this->functionData['coreAttachments']) : 0;
$this->functionData['coreAttachments'][$count_a1b4e15e508214588b83890fbaeff847]['info'] = $info;
$this->functionData['coreAttachments'][$count_a1b4e15e508214588b83890fbaeff847]['pages'] = $pages;
$this->functionData['coreAttachments'][$count_a1b4e15e508214588b83890fbaeff847]['attachments'] = $attachments;
}

if ( ! isset( $this->registry->templateStriping['attach'] ) ) {
$this->registry->templateStriping['attach'] = array( FALSE, "row1","row2");
}
$IPBHTML .= "<div class='row1'>	
	" . (($info['has_limit'] == 1) ? ("<div id='space_allowance' class='general_box'>
			<p><strong>{$info['attach_space_used']}</strong></p>
			<p class='progress_bar " . (($info['full_percent'] > 80) ? ("limit") : ("")) . "' title='{$this->lang->words['ucp_attach_allowance']} {$info['full_percent']}% {$this->lang->words['ucp_full']}'>
				<span style='width: {$info['full_percent']}%'>{$info['full_percent']}%</span>
			</p>
			<p class='desc'>{$info['attach_space_count']}</p>
		</div>") : ("")) . "
	<div class='topic_controls'>
		$pages
	</div>
	<br />
	<!-- ATTACHMENTS TABLE -->
	<form action=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;tab=core&amp;area=updateAttachments&amp;do=saveIt", "public",'' ), "", "" ) . "\" id=\"checkBoxForm\" method=\"post\">
	<table class='ipb_table' summary=\"{$this->lang->words['ucp_user_attach']}\">
		<tr class='header'>
				<th scope='col' style='width: 2%'>&nbsp;</th>
				<th scope='col' style='width: 35%'>{$this->lang->words['attach_title']}</th>
				<th scope='col' style='width: 7%'>{$this->lang->words['attach_hsize']}</th>
				<th scope='col' style='width: 27%'>{$this->lang->words['attach_topic']}</th>
				<th scope='col' class='short' style='width: 3%'><input class='input_check' id=\"checkAllAttachments\" type=\"checkbox\" value=\"{$this->lang->words['check_all']}\" /></th>
			</tr>
			" . ((count($attachments)) ? ("
								".$this->__f__72e66fca6fb5d008a061013c87e46b5c($info,$pages,$attachments)."			") : ("
				<tr>
					<td colspan=\"5\" class='no_messages'>{$this->lang->words['splash_noattach']}</td>
				</tr>
			")) . "
		</table>
		" . ((count($attachments)) ? ("
			<div class='moderation_bar rounded with_action clear' id='topic_mod'>
				<input type=\"hidden\" name=\"authKey\" value=\"{$this->member->form_hash}\" />
				<input type=\"submit\" value=\"{$this->lang->words['attach_delete']}\" class=\"input_submit alt\" />
			</div>
		") : ("")) . "
	</form>
</div>
<script type='text/javascript'>
	ipb.global.registerCheckAll( 'checkAllAttachments', 'checkall' );
</script>";
return $IPBHTML;
}


function __f__72e66fca6fb5d008a061013c87e46b5c($info="",$pages="",$attachments)
{
	$_ips___x_retval = '';
	$__iteratorCount = 0;
	foreach( $attachments as $idx => $data )
	{
		
		$__iteratorCount++;
		$_ips___x_retval .= "
					<tr id=\"a{$data['attach_id']}\" class='" .  IPSLib::next( $this->registry->templateStriping["attach"] ) . "'>
							<td class='short altrow'>
								" . (($data['attach_thumb_location']) ? ("
									<a href=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=attach&amp;section=attach&amp;attach_rel_module={$data['_type']}&amp;attach_id={$data['attach_id']}", "public",'' ), "", "" ) . "\" title=\"{$data['attach_file']}\"><img src=\"{$this->settings['upload_url']}/{$data['attach_thumb_location']}\" width=\"30\" height=\"30\" alt='{$this->lang->words['attached_file']}' /></a>
								") : ("
									<img src=\"{$this->settings['mime_img']}/{$data['image']}\" alt=\"{$this->lang->words['attached_file']}\" />
								")) . "
							</td>
							<td>
								<a href=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=attach&amp;section=attach&amp;attach_rel_module={$data['_type']}&amp;attach_id={$data['attach_id']}", "public",'' ), "", "" ) . "\" title=\"{$data['attach_file']}\">{$data['short_name']}</a><br />
								<span class=\"desc\">( {$this->lang->words['attach_hits']}: {$data['attach_hits']} )</span>
							</td>
							<td class='short altrow'>{$data['real_size']}</td>
							<td>
								" . (($data['attach_rel_id'] > 0 AND $data['attach_rel_module'] == 'post') ? ("
									<a href=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "showtopic={$data['tid']}&amp;view=findpost&amp;p={$data['attach_rel_id']}", "public",'' ), "", "" ) . "\" title='{$this->lang->words['ucp_view_org']}'>{$data['title']}</a>
								") : ("
									{$data['title']}
								")) . "
								<br />
								<span class=\"desc\">{$data['attach_date']}</span>
							</td>
							<td class='altrow short'><input type=\"checkbox\" name=\"attach[{$data['attach_id']}]\" value=\"1\" class=\"input_check checkall\" /></td>
						</tr>
				
";
	}
	$_ips___x_retval .= '';
	unset( $__iteratorCount );
	return $_ips___x_retval;
}

/* -- displayNameForm --*/
function displayNameForm($form=array(),$error="",$okmessage="", $isFB=false) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['displayNameForm'] ) )
{
$count_f6e7b8624b7893a29c33ec9102fecab0 = is_array($this->functionData['displayNameForm']) ? count($this->functionData['displayNameForm']) : 0;
$this->functionData['displayNameForm'][$count_f6e7b8624b7893a29c33ec9102fecab0]['form'] = $form;
$this->functionData['displayNameForm'][$count_f6e7b8624b7893a29c33ec9102fecab0]['error'] = $error;
$this->functionData['displayNameForm'][$count_f6e7b8624b7893a29c33ec9102fecab0]['okmessage'] = $okmessage;
$this->functionData['displayNameForm'][$count_f6e7b8624b7893a29c33ec9102fecab0]['isFB'] = $isFB;
}
$IPBHTML .= "" . (($okmessage != "") ? ("
	<p class='message'>{$okmessage}</p>
") : ("")) . "
<fieldset class='row1'>
	<h3>{$this->lang->words['dname_title']}</h3>
	<br />
	" . (($form['_noPerm']) ? ("
		<p class='message error'>{$form['_noPerm']}</p>
	") : ("<p class='message unspecific'>{$form['_lang_string']}</p>
		<ul>
			<li class='field'>
				<label for='displayName'>{$this->lang->words['dname_choose']}</label><input class='input_text' type=\"text\" maxlength='{$this->settings['max_user_name_length']}' name=\"displayName\" id=\"displayName\" value=\"{$this->request['displayName']}\" size='30' /> <br />
				<span class='desc'>{$this->lang->words['dname_choose2']}</span>
			</li>
			" . ((!$isFB) ? ("
			<li class='field'>
				<label for='displayPassword'>{$this->lang->words['dname_password']}</label><input class='input_text' type=\"password\" name=\"displayPassword\" id=\"displayPassword\" value=\"\" size='30' /> <br />
				<span class='desc'>{$this->lang->words['dname_password2']}</span>
			</li>
			") : ("")) . "
		</ul>")) . "
</fieldset>";
return $IPBHTML;
}

/* -- emailChangeForm --*/
function emailChangeForm($txt, $_message, $captchaHTML, $isFB=false) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['emailChangeForm'] ) )
{
$count_9691fbb9b41558a6ebb0aa05e0e2fa18 = is_array($this->functionData['emailChangeForm']) ? count($this->functionData['emailChangeForm']) : 0;
$this->functionData['emailChangeForm'][$count_9691fbb9b41558a6ebb0aa05e0e2fa18]['txt'] = $txt;
$this->functionData['emailChangeForm'][$count_9691fbb9b41558a6ebb0aa05e0e2fa18]['_message'] = $_message;
$this->functionData['emailChangeForm'][$count_9691fbb9b41558a6ebb0aa05e0e2fa18]['captchaHTML'] = $captchaHTML;
$this->functionData['emailChangeForm'][$count_9691fbb9b41558a6ebb0aa05e0e2fa18]['isFB'] = $isFB;
}
$IPBHTML .= "<script type=\"text/javascript\">
var msg = \"$_message\";
	if ( msg != \"\"){
		alert(msg);
	}
</script>
<fieldset class='row1'>
	<h3>{$this->lang->words['change_email_title']}</h3>
	<br />
	<p class='message unspecific'>
		" . (($this->memberData['g_access_cp']) ? ("
			{$this->lang->words['admin_emailpassword']}
		") : ("
			{$txt}
		")) . "
	</p>
	" . ((!$this->memberData['g_access_cp']) ? ("<ul>
			<li class='field'>
				<label for='in_email_1'>{$this->lang->words['ce_new_email']}</label>
				<input type=\"text\" name=\"in_email_1\" id='in_email_1' class='input_text' value=\"\" />
			</li>
			<li class='field'>
				<label for='in_email_2'>{$this->lang->words['ce_new_email2']}</label>
				<input type=\"text\" name=\"in_email_2\" id='in_email_2' class='input_text' value=\"\" />
			</li>
			" . ((!$isFB) ? ("
			<li class='field'>
				<label for='password'>{$this->lang->words['ec_passy']}</label>
				<input type=\"password\" id='password' class='input_text' name=\"password\" value=\"\" />
			</li>
			") : ("")) . "
		</ul>") : ("")) . "
</fieldset>
" . (($captchaHTML != '' AND !$this->memberData['g_access_cp']) ? ("
	<br />
	$captchaHTML
") : ("")) . "";
return $IPBHTML;
}

/* -- emailPasswordChangeForm --*/
function emailPasswordChangeForm($txt, $_message, $isFB=false) {
$IPBHTML = "";
$IPBHTML .= "<!--no data in this master skin-->";
return $IPBHTML;
}

/* -- field_dropdown --*/
function field_dropdown($name="",$options="") {
$IPBHTML = "";
$IPBHTML .= "<select name=\"$name\" class='input_select'>
	$options
</select>";
return $IPBHTML;
}

/* -- field_entry --*/
function field_entry($title="",$desc="",$content="",$id="") {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['field_entry'] ) )
{
$count_54aeeb765bb4dfdc5542308e3b9e8e7e = is_array($this->functionData['field_entry']) ? count($this->functionData['field_entry']) : 0;
$this->functionData['field_entry'][$count_54aeeb765bb4dfdc5542308e3b9e8e7e]['title'] = $title;
$this->functionData['field_entry'][$count_54aeeb765bb4dfdc5542308e3b9e8e7e]['desc'] = $desc;
$this->functionData['field_entry'][$count_54aeeb765bb4dfdc5542308e3b9e8e7e]['content'] = $content;
$this->functionData['field_entry'][$count_54aeeb765bb4dfdc5542308e3b9e8e7e]['id'] = $id;
}
$IPBHTML .= "<li class='field'>
	<label for='field_$id'>$title</label>
	{$content}
	" . (($desc) ? ("<span class='desc'>{$desc}</span>") : ("")) . "
</li>";
return $IPBHTML;
}

/* -- field_textarea --*/
function field_textarea($name="",$value="") {
$IPBHTML = "";
$IPBHTML .= "<textarea cols=\"80\" rows=\"5\" wrap=\"soft\" name=\"$name\" class='input_text'>$value</textarea>";
return $IPBHTML;
}

/* -- field_textinput --*/
function field_textinput($name="",$value="") {
$IPBHTML = "";
$IPBHTML .= "<input type=\"text\" size=\"50\" name=\"$name\" value='$value' class='input_text' />";
return $IPBHTML;
}

/* -- membersAboutMeForm --*/
function membersAboutMeForm($preview_about_me="",$editor_html="") {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['membersAboutMeForm'] ) )
{
$count_a1b2d085d192b79d5dc2b1d03581fbad = is_array($this->functionData['membersAboutMeForm']) ? count($this->functionData['membersAboutMeForm']) : 0;
$this->functionData['membersAboutMeForm'][$count_a1b2d085d192b79d5dc2b1d03581fbad]['preview_about_me'] = $preview_about_me;
$this->functionData['membersAboutMeForm'][$count_a1b2d085d192b79d5dc2b1d03581fbad]['editor_html'] = $editor_html;
}

if ( ! isset( $this->registry->templateStriping['usercp'] ) ) {
$this->registry->templateStriping['usercp'] = array( FALSE, "row1","row2");
}
$IPBHTML .= "" . (($preview_about_me) ? ("
	<fieldset class='" .  IPSLib::next( $this->registry->templateStriping["usercp"] ) . "'>
		<h3>{$this->lang->words['cp_current_aboutme']}</h3>
		<div class='signature'>
			{$preview_about_me}
		</div>
	</fieldset>
") : ("")) . "
<fieldset class='" .  IPSLib::next( $this->registry->templateStriping["usercp"] ) . "'>
	<h3>{$this->lang->words['cp_edit_aboutme']}</h3>
	<div>
		{$editor_html}
	</div>
</fieldset>
" . ((!$this->settings['disable_lightbox']) ? ("
" . ( method_exists( $this->registry->getClass('output')->getTemplate('global'), 'include_lightbox' ) ? $this->registry->getClass('output')->getTemplate('global')->include_lightbox() : '' ) . "
") : ("")) . "
" . ( method_exists( $this->registry->getClass('output')->getTemplate('global'), 'include_highlighter' ) ? $this->registry->getClass('output')->getTemplate('global')->include_highlighter(1) : '' ) . "";
return $IPBHTML;
}

/* -- membersFacebookConnect --*/
function membersFacebookConnect($fbuid, $fbUserData, $linkedMemberData) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['membersFacebookConnect'] ) )
{
$count_80179fc6cc887d6d91161dace47eefdd = is_array($this->functionData['membersFacebookConnect']) ? count($this->functionData['membersFacebookConnect']) : 0;
$this->functionData['membersFacebookConnect'][$count_80179fc6cc887d6d91161dace47eefdd]['fbuid'] = $fbuid;
$this->functionData['membersFacebookConnect'][$count_80179fc6cc887d6d91161dace47eefdd]['fbUserData'] = $fbUserData;
$this->functionData['membersFacebookConnect'][$count_80179fc6cc887d6d91161dace47eefdd]['linkedMemberData'] = $linkedMemberData;
}

if ( ! isset( $this->registry->templateStriping['usercp'] ) ) {
$this->registry->templateStriping['usercp'] = array( FALSE, "row1","row2");
}
$IPBHTML .= "<!-- Not authorized email? -->
" . ((! $this->memberData['fb_emailallow'] AND strstr( $this->memberData['email'], '@proxymail.facebook.com' )) ? ("
<fieldset class='" .  IPSLib::next( $this->registry->templateStriping["usercp"] ) . "'>
	<h3>{$this->lang->words['fb_email_not_allowed']}</h3>
	<p>{$this->lang->words['fb_email_not_allowed_desc']}</p>
</fieldset>
") : ("" . (($fbuid AND $linkedMemberData['member_id'] AND $linkedMemberData['member_id'] != $this->memberData['member_id']) ? ("
		<!-- currently logged in FB user is linked to a different account -->
		<div class='message error'>
			<strong>{$this->lang->words['fb_connect_mismatch']}</strong>
			<p>{$this->lang->words['fb_connect_mismatch_desc']}</p>
		</div>
	") : ("<div id='fbUserBox'>
			{$this->lang->words['fb_config']}
			<br />
			<br />
			<fb:login-button size=\"medium\" background=\"light\" length=\"long\" onlogin=\"ipb.facebook.usercp_loadUser();\"></fb:login-button>
		</div>
		<div id='fb-template' style='display:none'>
			<fieldset class='row2'>
				<div style='float:left; margin-right:4px;margin-bottom:3px'>
					<fb:profile-pic uid=\"loggedinuser\" facebook-logo=\"true\"></fb:profile-pic>
				</div>
				{$this->lang->words['fb_logged_in_as']} <strong><fb:name uid=\"loggedinuser\" useyou=\"false\"></fb:name></strong>
				" . ((is_array($fbUserData['status']) AND $fbUserData['status']['message']) ? ("
					<br /><br /><p class='desc'>{$fbUserData['first_name']} {$fbUserData['status']['message']}</p>
				") : ("")) . "
			</fieldset>
			<fieldset class='row1'>
				<h3>{$this->lang->words['fb_sync_options']}</h3>
				<ul>
					<li class='field checkbox'>
						<input class='input_check' type='checkbox' value='1' name='fbc_s_pic' value='1' " . (($this->memberData['fbc_s_pic'] > 0) ? ("checked='checked'") : ("")) . " id='fbc_s_pic' /><label for='fbc_s_pic'>{$this->lang->words['fb_sync_photo']}</label>
					</li>
" . (($this->memberData['can_updated_status']) ? ("<li class='field checkbox'>
						<input class='input_check' type='checkbox' value='1' name='fbc_s_status' value='1' " . (($this->memberData['fbc_s_status'] > 0) ? ("checked='checked'") : ("")) . " id='fbc_s_status' /><label for='fbc_s_status'>{$this->lang->words['fb_sync_status']}</label>
					</li>") : ("")) . "
					<li class='field checkbox'>
						<input class='input_check' type='checkbox' value='1' name='fbc_s_aboutme' value='1' " . (($this->memberData['fbc_s_aboutme'] > 0) ? ("checked='checked'") : ("")) . " id='fbc_s_aboutme' /><label for='fbc_s_aboutme'>{$this->lang->words['fb_sync_aboutme']}</label>
					</li>
				</ul>
				<p class='desc'>
					{$this->lang->words['fb_last_syncd']}
					" . (($this->memberData['fb_lastsync']) ? ("
						" . $this->registry->getClass('class_localization')->getDate($this->memberData['fb_lastsync'],"long", 0) . "
					") : ("
						{$this->lang->words['fb_never']}
					")) . "
				</p>
				<p><input type='submit' class='input_submit alt' id='fbc_sync' value='{$this->lang->words['fb_sync_now']}' /></p>
			</fieldset>
			<fieldset class='row1'>
				<h3>{$this->lang->words['fb_disassociate']}</h3>
				<p class='desc'>{$this->lang->words['fb_disassociate_desc']}</p>
				" . ((strstr( $this->memberData['email'], '@proxymail.facebook.com' )) ? ("
					<div class='message'>
						<strong>{$this->lang->words['fb_using_email']}</strong>
						<p>{$this->lang->words['fb_disassociate_info_1']} <a href='" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;tab=core&amp;area=email", "public",'' ), "", "" ) . "'>{$this->lang->words['fb_disassociate_info_2']}</a> {$this->lang->words['fb_disassociate_info_3']}
						</p>
					</div>
					<br />
				") : ("")) . "
				<p><input type='button' class='input_submit alt' id='fbc_remove' value='{$this->lang->words['fb_disassociate_now']}' /></p>
			</fieldset>
		</div>
	
		<script type=\"text/javascript\">
			/* Init Facebook JS */
			try
			{
				ipb.facebook.mem_fb_uid = " . intval($this->memberData['fb_uid']) . ";
				
				FB_RequireFeatures([\"XFBML\"], function()
				{
					FB.init(\"{$this->settings['fbc_appid']}\", \"{$this->settings['fbc_xdlocation']}\" );
					FB.Facebook.get_sessionState().waitUntilReady(function()
					{
						FB.Connect.ifUserConnected( ipb.facebook.usercp_loadUser );
					} );
				} );
			}
			catch( error )
			{
				//alert( error );
			}
		</script>")) . "")) . "";
return $IPBHTML;
}

/* -- membersIgnoredUsersForm --*/
function membersIgnoredUsersForm($members) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['membersIgnoredUsersForm'] ) )
{
$count_cfdd8dbef365eb81113d9028b3254260 = is_array($this->functionData['membersIgnoredUsersForm']) ? count($this->functionData['membersIgnoredUsersForm']) : 0;
$this->functionData['membersIgnoredUsersForm'][$count_cfdd8dbef365eb81113d9028b3254260]['members'] = $members;
}

if ( ! isset( $this->registry->templateStriping['members'] ) ) {
$this->registry->templateStriping['members'] = array( FALSE, "row1","row2");
}
$IPBHTML .= "<script type='text/javascript'>
//<![CDATA[
	ipb.templates['autocomplete_wrap'] = new Template(\"<ul id='#{id}' class='ipbmenu_content' style='width: 250px;'></ul>\");
	ipb.templates['autocomplete_item'] = new Template(\"<li id='#{id}'><img src='#{img}' alt='' width='#{img_w}' height='#{img_h}' />&nbsp;&nbsp;#{itemvalue}</li>\");
//]]>
</script>
<fieldset class='row1'>
	<h3 class='maintitle'>{$this->lang->words['mi5_title']}</h3>
	<table class='ipb_table' summary=\"{$this->lang->words['ucp_ignored_users']}\">
		<tr class='header'>
			<th scope='col' width=\"30%\">{$this->lang->words['mi5_name']}</th>
			<th scope='col' width=\"30%\">{$this->lang->words['mi5_group']}</th>
			<th scope='col' width=\"10%\">{$this->lang->words['mi5_posts']}</th>
			<th scope='col' width=\"10%\">{$this->lang->words['ucp_ignore_posts']}</th>
			<th scope='col' width=\"10%\">{$this->lang->words['ucp_ignore_msgs']}</th>
			<th scope='col' width=\"10%\">&nbsp;</th>
		</tr>
				".$this->__f__1e7e09fb9f6a971ec8e6b4b4b218414d($members)."	</table>
</fieldset>
<fieldset class=\"row2\">
	<h3>{$this->lang->words['mi5_addem']}</h3>
	<ul>
		<li class='field'>
			<label for='newbox_1'>{$this->lang->words['ucp_members_name']}</label>
			<input type=\"text\" size='40' name=\"newbox_1\" id=\"newbox_1\" value=\"{$this->request['newbox_1']}\" />
			<ul>
				<li class='field checkbox'>
					<input type='checkbox' class='input_check' name='ignore_messages' value='1' />
					{$this->lang->words['ucp_ignore_pc']}
				</li>
				<li class='field checkbox'>
					<input type='checkbox' class='input_check' name='ignore_topics' value='1' checked='checked' />
					{$this->lang->words['ucp_ignore_posts']}
				</li>
			</ul>
		</li>
	</ul>
</fieldset>
<script type=\"text/javascript\">
	document.observe(\"dom:loaded\", function(){
		var url = ipb.vars['base_url'] + 'app=core&module=ajax&section=findnames&do=get-member-names&secure_key=' + ipb.vars['secure_hash'] + '&name=';
		new ipb.Autocomplete( $('newbox_1'), { multibox: false, url: url, templates: { wrap: ipb.templates['autocomplete_wrap'], item: ipb.templates['autocomplete_item'] } } );
	});
</script>";
return $IPBHTML;
}


function __f__1e7e09fb9f6a971ec8e6b4b4b218414d($members)
{
	$_ips___x_retval = '';
	$__iteratorCount = 0;
	foreach( $members as $member )
	{
		
		$__iteratorCount++;
		$_ips___x_retval .= "
			<tr class='" .  IPSLib::next( $this->registry->templateStriping["members"] ) . "'>
				<td>
					<img src='{$member['pp_thumb_photo']}' width='{$member['pp_thumb_width']}' height='{$member['pp_thumb_height']}' border='0' />
					<strong><a href=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "showuser={$member['member_id']}", "public",'' ), "{$member['members_seo_name']}", "showuser" ) . "\">{$member['members_display_name']}</a></strong>
					<p>{$this->lang->words['m_joined']} " . $this->registry->getClass('class_localization')->getDate($member['joined'],"joined", 0) . "</p>
				</td>
				<td>{$member['g_title']}</td>
				<td>{$member['posts']}</td>
				<td>
					" . (($member['ignoreData']['ignore_topics'] == 1) ? ("
						<a href=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;tab=members&amp;area=toggleIgnoredUser&amp;do=saveIt&amp;id={$member['member_id']}&amp;field=topics", "public",'' ), "", "" ) . "\" title=\"{$this->lang->words['click_toggle']}\">{$this->lang->words['yes']}</a>
					") : ("
						<a href=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;tab=members&amp;area=toggleIgnoredUser&amp;do=saveIt&amp;id={$member['member_id']}&amp;field=topics", "public",'' ), "", "" ) . "\" title=\"{$this->lang->words['click_toggle']}\">{$this->lang->words['no']}</a>
					")) . "
				</td>
				<td>
					" . (($member['ignoreData']['ignore_messages'] == 1) ? ("
						<a href=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;tab=members&amp;area=toggleIgnoredUser&amp;do=saveIt&amp;id={$member['member_id']}&amp;field=messages", "public",'' ), "", "" ) . "\" title=\"{$this->lang->words['click_toggle']}\">{$this->lang->words['yes']}</a>
					") : ("
						<a href=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;tab=members&amp;area=toggleIgnoredUser&amp;do=saveIt&amp;id={$member['member_id']}&amp;field=messages", "public",'' ), "", "" ) . "\" title=\"{$this->lang->words['click_toggle']}\">{$this->lang->words['no']}</a>
					")) . "
				</td>
				<td><a href=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;tab=members&amp;area=removeIgnoredUser&amp;do=saveIt&amp;id={$member['member_id']}", "public",'' ), "", "" ) . "\">{$this->lang->words['mi5_remove']}</a></td>
			</tr>
		
";
	}
	$_ips___x_retval .= '';
	unset( $__iteratorCount );
	return $_ips___x_retval;
}

/* -- membersProfileCustomize --*/
function membersProfileCustomize($options, $input, $errors) {
$IPBHTML = "";
$IPBHTML .= "<!--no data in this master skin-->";
return $IPBHTML;
}

/* -- membersProfileForm --*/
function membersProfileForm($custom_fields='',$group_titles='',$day='',$mon='',$year='', $amEditor='', $times=array()) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['membersProfileForm'] ) )
{
$count_9cbdc99e3eb8b11e58f7b94616639377 = is_array($this->functionData['membersProfileForm']) ? count($this->functionData['membersProfileForm']) : 0;
$this->functionData['membersProfileForm'][$count_9cbdc99e3eb8b11e58f7b94616639377]['custom_fields'] = $custom_fields;
$this->functionData['membersProfileForm'][$count_9cbdc99e3eb8b11e58f7b94616639377]['group_titles'] = $group_titles;
$this->functionData['membersProfileForm'][$count_9cbdc99e3eb8b11e58f7b94616639377]['day'] = $day;
$this->functionData['membersProfileForm'][$count_9cbdc99e3eb8b11e58f7b94616639377]['mon'] = $mon;
$this->functionData['membersProfileForm'][$count_9cbdc99e3eb8b11e58f7b94616639377]['year'] = $year;
$this->functionData['membersProfileForm'][$count_9cbdc99e3eb8b11e58f7b94616639377]['amEditor'] = $amEditor;
$this->functionData['membersProfileForm'][$count_9cbdc99e3eb8b11e58f7b94616639377]['times'] = $times;
}

if ( ! isset( $this->registry->templateStriping['usercp'] ) ) {
$this->registry->templateStriping['usercp'] = array( FALSE, "row1","row2");
}
$IPBHTML .= "<fieldset class='" .  IPSLib::next( $this->registry->templateStriping["usercp"] ) . "'>
	<h3>{$this->lang->words['ucp_comments']}</h3>
	<ul>
		<li class='field checkbox'>
			<input class='input_check' type='checkbox' value='1' name='pp_setting_count_comments' value='1' " . (($this->memberData['pp_setting_count_comments'] > 0) ? ("checked='checked'") : ("")) . " id='comments_enable' /><label for='comments_enable'>{$this->lang->words['ucp_enable_comments']}</label>
		</li>
		<li class='field'>
			<label for='comments_notify'>{$this->lang->words['ucp_comment_notify_type']}</label>
			<select name='pp_setting_notify_comments' id='comments_notify' class='input_select'>
				<option value='none'" . (($this->memberData['pp_setting_notify_comments'] == 'none') ? (" selected=\"selected\"") : ("")) . ">{$this->lang->words['op_dd_none']}</option>
				<option value='email'" . (($this->memberData['pp_setting_notify_comments'] == 'email') ? (" selected=\"selected\"") : ("")) . ">{$this->lang->words['op_dd_email']}</option>
				<option value='pm'" . (($this->memberData['pp_setting_notify_comments'] == 'pm') ? (" selected=\"selected\"") : ("")) . ">{$this->lang->words['op_dd_pm']}</option>
			</select>
		 	<br />
			<span class='desc'>{$this->lang->words['m_choose_comm_type']}</span>
		</li>
		<li class='field'>
			<label for='comments_moderate'>{$this->lang->words['ucp_comment_approval']}</label>
			<select name='pp_setting_moderate_comments' id='comments_moderate' class='input_select'>
				<option value='0'" . ((! $this->memberData['pp_setting_moderate_comments']) ? (" selected=\"selected\"") : ("")) . ">{$this->lang->words['op_dd_disabled']}</option>
				<option value='1'" . (($this->memberData['pp_setting_moderate_comments']) ? (" selected=\"selected\"") : ("")) . ">{$this->lang->words['op_dd_enabled']}</option>
			</select>
			<br />
			<span class='desc'>{$this->lang->words['m_choose_cmod_type']}</span>
		</li>
	</ul>
</fieldset>
" . (($this->settings['friends_enabled'] AND $this->memberData['g_can_add_friends']) ? ("<fieldset class='" .  IPSLib::next( $this->registry->templateStriping["usercp"] ) . "'>
		<h3>{$this->lang->words['ucp_friends']}</h3>
		<ul>
			<li class='field checkbox'>
				<input class='input_check' type='checkbox' value='1' name='pp_setting_count_friends' value='1' " . (($this->memberData['pp_setting_count_friends'] > 0) ? ("checked='checked'") : ("")) . " id='friends_enable' /><label for='friends_enable'>{$this->lang->words['ucp_show_friends_profile']}</label>
			</li>
			<li class='field'>
				<label for='friend_notify'>{$this->lang->words['ucp_friend_notify']}</label>
				<select name='pp_setting_notify_friend' id='friend_notify' class='input_select'>
					<option value='none'" . (($this->memberData['pp_setting_notify_friend'] == 'none') ? (" selected=\"selected\"") : ("")) . ">{$this->lang->words['op_dd_none']}</option>
					<option value='email'" . (($this->memberData['pp_setting_notify_friend'] == 'email') ? (" selected=\"selected\"") : ("")) . ">{$this->lang->words['op_dd_email']}</option>
					<option value='pm'" . (($this->memberData['pp_setting_notify_friend'] == 'pm') ? (" selected=\"selected\"") : ("")) . ">{$this->lang->words['op_dd_pm']}</option>
				</select>
				<br />
				<span class='desc'>{$this->lang->words['m_choose_friend_type']}</span>
			</li>
			<li class='field'>
				<label for='friend_moderate'>{$this->lang->words['ucp_friend_approve']}</label>
				<select name='pp_setting_moderate_friends' id='friend_moderate' class='input_select'>
					<option value='0'" . ((! $this->memberData['pp_setting_moderate_friends']) ? (" selected=\"selected\"") : ("")) . ">{$this->lang->words['op_dd_disabled']}</option>
					<option value='1'" . (($this->memberData['pp_setting_moderate_friends']) ? (" selected=\"selected\"") : ("")) . ">{$this->lang->words['op_dd_enabled']}</option>
				</select>
				<br />
				<span class='desc'>{$this->lang->words['m_choose_fmod_type']}</span>
			</li>
		</ul>
	</fieldset>") : ("")) . "
<fieldset class='" .  IPSLib::next( $this->registry->templateStriping["usercp"] ) . "'>
	<h3>{$this->lang->words['profile_information']}</h3>
	<ul>
		<li class='field checkbox'>
			<input class='input_check' type='checkbox' value='1' name='pp_setting_count_visitors' value='1' " . (($this->memberData['pp_setting_count_visitors'] > 0) ? ("checked='checked'") : ("")) . " id='pp_latest_visitors' /><label for='pp_latest_visitors'>{$this->lang->words['ucp_show_x_latest']}</label>
		</li>
		" . ((($this->settings['post_titlechange']) && ($this->memberData['posts'] > $this->settings['post_titlechange'])) ? ("
			<li class='field'>
				<label for='member_title'>{$this->lang->words['member_title']}</label>
				<input type='text' class='input_text' size='30' id='member_title' name='member_title' value='{$this->memberData['title']}' />
				<br />
				<span class='desc'>{$this->lang->words['member_title_desc']}</span>
			</li>
		") : ("")) . "
		" . (($day AND $mon AND $year) ? ("
			<li class='field'>
				<label for='birthday'>{$this->lang->words['ucp_birthday_select']}</label>
				<select name=\"month\">&nbsp;
					".$this->__f__1a09e1bb7848bd7d9193b11dcb28498a($custom_fields,$group_titles,$day,$mon,$year,$amEditor,$times)."				</select>			
				<select name=\"day\">&nbsp;
					".$this->__f__8ca3033dfc6ebec382e66753fc1a4231($custom_fields,$group_titles,$day,$mon,$year,$amEditor,$times)."				</select> 
				<select name=\"year\">&nbsp;
					".$this->__f__2aaa981bd9c2ae1f801b0c597401c50a($custom_fields,$group_titles,$day,$mon,$year,$amEditor,$times)."				</select> <br />
				<span class='desc'>{$this->lang->words['ucp_birthday_optional']}</span>
			</li>
		") : ("")) . "
	</ul>
</fieldset>
" . (($required_output) ? ("
	<fieldset class='" .  IPSLib::next( $this->registry->templateStriping["usercp"] ) . "'>
		<h3>{$this->lang->words['ucp_required_info']}</h3>
		<ul>
			{$required_output}
		</ul>
	</fieldset>
") : ("")) . "
" . (($optional_output) ? ("
	<fieldset class='" .  IPSLib::next( $this->registry->templateStriping["usercp"] ) . "'>
		<h3>{$this->lang->words['ucp_other_info']}</h3>
		<ul>
			{$optional_output}
		</ul>
	</fieldset>
") : ("")) . "";
return $IPBHTML;
}


function __f__1a09e1bb7848bd7d9193b11dcb28498a($custom_fields='',$group_titles='',$day='',$mon='',$year='', $amEditor='', $times=array())
{
	$_ips___x_retval = '';
	$__iteratorCount = 0;
	foreach( $mon as $m )
	{
		
		$__iteratorCount++;
		$_ips___x_retval .= "
						<option value='{$m[0]}'" . (($m[0] == $this->memberData['bday_month']) ? (" selected=\"selected\"") : ("")) . ">{$m[1]}</option>
					
";
	}
	$_ips___x_retval .= '';
	unset( $__iteratorCount );
	return $_ips___x_retval;
}

function __f__8ca3033dfc6ebec382e66753fc1a4231($custom_fields='',$group_titles='',$day='',$mon='',$year='', $amEditor='', $times=array())
{
	$_ips___x_retval = '';
	$__iteratorCount = 0;
	foreach( $day as $d )
	{
		
		$__iteratorCount++;
		$_ips___x_retval .= "
						<option value='{$d[0]}'" . (($d[0] == $this->memberData['bday_day']) ? (" selected=\"selected\"") : ("")) . ">{$d[1]}</option>
					
";
	}
	$_ips___x_retval .= '';
	unset( $__iteratorCount );
	return $_ips___x_retval;
}

function __f__2aaa981bd9c2ae1f801b0c597401c50a($custom_fields='',$group_titles='',$day='',$mon='',$year='', $amEditor='', $times=array())
{
	$_ips___x_retval = '';
	$__iteratorCount = 0;
	foreach( $year as $y )
	{
		
		$__iteratorCount++;
		$_ips___x_retval .= "
						<option value='{$y[0]}'" . (($y[0] == $this->memberData['bday_year']) ? (" selected=\"selected\"") : ("")) . ">{$y[1]}</option>
					
";
	}
	$_ips___x_retval .= '';
	unset( $__iteratorCount );
	return $_ips___x_retval;
}

/* -- membersSignatureForm --*/
function membersSignatureForm($preview_sig="",$editor_html="",$sig_restrictions=array()) {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['membersSignatureForm'] ) )
{
$count_65a466f54f7d9c1138b3aad6939d3fc8 = is_array($this->functionData['membersSignatureForm']) ? count($this->functionData['membersSignatureForm']) : 0;
$this->functionData['membersSignatureForm'][$count_65a466f54f7d9c1138b3aad6939d3fc8]['preview_sig'] = $preview_sig;
$this->functionData['membersSignatureForm'][$count_65a466f54f7d9c1138b3aad6939d3fc8]['editor_html'] = $editor_html;
$this->functionData['membersSignatureForm'][$count_65a466f54f7d9c1138b3aad6939d3fc8]['sig_restrictions'] = $sig_restrictions;
}

if ( ! isset( $this->registry->templateStriping['usercp'] ) ) {
$this->registry->templateStriping['usercp'] = array( FALSE, "row1","row2");
}
$IPBHTML .= "<input type='hidden' name='key' value='{$key}' />
<input type='hidden' name='removeattachid' value='0' />" . (($preview_sig) ? ("
	<fieldset class='" .  IPSLib::next( $this->registry->templateStriping["usercp"] ) . "'>
		<h3>{$this->lang->words['cp_current_sig']}</h3>
		<div class='signature'>
			{$preview_sig}
		</div>
	</fieldset>
") : ("")) . "
<fieldset class='" .  IPSLib::next( $this->registry->templateStriping["usercp"] ) . "'>
	<h3>{$this->lang->words['cp_edit_sig']}</h3>
	<div>
		{$editor_html}
	</div>
</fieldset>
" . (($this->memberData['g_signature_limits']) ? ("<fieldset class='" .  IPSLib::next( $this->registry->templateStriping["usercp"] ) . "'>
		<h3>{$this->lang->words['sig_restrictions']}</h3>
		<br />
		<div class='desc'>
			{$this->lang->words['sig_restrictions_contain']}
			<ul class='bullets'>
				" . (($sig_restrictions[1] !== '') ? ("
					<li>" . sprintf( $this->lang->words['sig_max_imagesr'], $sig_restrictions[1] ) . "</li>
				") : ("
					<li>{$this->lang->words['sig_max_imagesr_nl']}</li>
				")) . "" . (($sig_restrictions[2] !== '' || $sig_restrictions[3] !== '') ? ("
					<li>" . sprintf( $this->lang->words['sig_max_imgsize'], $sig_restrictions[2], $sig_restrictions[3] ) . "</li>
				") : ("
					<li>{$this->lang->words['sig_max_imgsize_nl']}</li>
				")) . "" . (($sig_restrictions[4] !== '') ? ("
					<li>" . sprintf( $this->lang->words['sig_max_urls'], $sig_restrictions[4] ) . "</li>
				") : ("
					<li>{$this->lang->words['sig_max_urls_nl']}</li>
				")) . "" . (($sig_restrictions[5] !== '') ? ("
					<li>" . sprintf( $this->lang->words['sig_max_lines'], $sig_restrictions[5] ) . "</li>
				") : ("
					<li>{$this->lang->words['sig_max_lines_nl']}</li>
				")) . "
			</ul>
		</div>
	</fieldset>") : ("")) . "
" . ((!$this->settings['disable_lightbox']) ? ("
" . ( method_exists( $this->registry->getClass('output')->getTemplate('global'), 'include_lightbox' ) ? $this->registry->getClass('output')->getTemplate('global')->include_lightbox() : '' ) . "
") : ("")) . "
" . ( method_exists( $this->registry->getClass('output')->getTemplate('global'), 'include_highlighter' ) ? $this->registry->getClass('output')->getTemplate('global')->include_highlighter(1) : '' ) . "";
return $IPBHTML;
}

/* -- membersSignatureFormError --*/
function membersSignatureFormError($form) {
$IPBHTML = "";
$IPBHTML .= "<fieldset class='row1'>
	<h3>{$this->lang->words['cp_edit_sig']}</h3>
	<br />
	" . (($form['_noPerm']) ? ("
		<p class='message error'>{$form['_noPerm']}</p>
	") : ("")) . "
</fieldset>";
return $IPBHTML;
}

/* -- membersTwitterConnect --*/
function membersTwitterConnect($isConnected, $twitterUser=array()) {
$IPBHTML = "";
$IPBHTML .= "<!--no data in this master skin-->";
return $IPBHTML;
}

/* -- notificationsForm --*/
function notificationsForm($config, $emailData) {
$IPBHTML = "";
$IPBHTML .= "<!--no data in this master skin-->";
return $IPBHTML;
}

/* -- notificationsLog --*/
function notificationsLog($notifications, $error='', $pages='') {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['notificationsLog'] ) )
{
$count_b29951d7613ffcce09a9a55e8e9f6125 = is_array($this->functionData['notificationsLog']) ? count($this->functionData['notificationsLog']) : 0;
$this->functionData['notificationsLog'][$count_b29951d7613ffcce09a9a55e8e9f6125]['notifications'] = $notifications;
$this->functionData['notificationsLog'][$count_b29951d7613ffcce09a9a55e8e9f6125]['error'] = $error;
$this->functionData['notificationsLog'][$count_b29951d7613ffcce09a9a55e8e9f6125]['pages'] = $pages;
}

$this->settings['_mobile_nav_home'] = 1;
$IPBHTML .= "<form action=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;tab=core&amp;area=removeNotifications&amp;do=remove", "public",'' ), "", "" ) . "\" id=\"checkBoxForm\" method=\"post\">
	<input type=\"hidden\" name=\"secure_key\" value=\"{$this->member->form_hash}\" />
	<div class='master_list' id='notifications'>
		<h2>{$this->lang->words['arch_notifications_head']}</h2>
		" . (($error) ? ("
		<p class='message error'>
			{$error}
		</p>
		") : ("" . (($this->request['confirm']) ? ("
			<p class='message'>
				{$this->lang->words['notify_rem_suc']}
			</p>
			") : ("")) . "")) . "
		".$this->__f__31b393a66562d1b16a7750abaa05e2c7($notifications,$error,$pages)."	</div>
	" . ((count($notifications)) ? ("
		<div class='submit'>
			<a href='" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;area=markNotification&amp;do=mark&amp;mark=all", "public",'' ), "", "" ) . "' id='ack_pm_notification' class='button secondary'>{$this->lang->words['notificationlog_mar']}</a>
		</div>
	") : ("")) . "
</form>";
return $IPBHTML;
}


function __f__31b393a66562d1b16a7750abaa05e2c7($notifications, $error='', $pages='')
{
	$_ips___x_retval = '';
	$__iteratorCount = 0;
	foreach( $notifications as $notification )
	{
		
		$__iteratorCount++;
		$_ips___x_retval .= "
			<div class='row touch-row'>
				<div class='icon'>
					" . (($notification['member']['member_id']) ? ("
						<a href='" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "showuser={$notification['member']['member_id']}", "public",'' ), "{$notification['member']['members_seo_name']}", "showuser" ) . "' class='ipsUserPhotoLink'>
							<img src='{$notification['member']['pp_small_photo']}' class='photo' />
						</a>
					") : ("")) . "
				</div>
				<div class='rowContent'>
					<strong>" . ((strpos( $notification['notify_title'], '<a href' ) === false) ? ("<a href='" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "app=core&amp;module=usercp&amp;tab=core&amp;area=viewNotification&amp;do=view&amp;view={$notification['notify_id']}", "public",'' ), "", "" ) . "' class='title'>") : ("")) . "
					{$notification['notify_title']}
					" . ((strpos( $notification['notify_title'], '<a href' ) === false) ? ("</a>") : ("")) . "
					</strong>
					<br />
					<span class='desc'>{$this->lang->words['th_sent']} " . $this->registry->getClass('class_localization')->getDate($notification['notify_sent'],"long", 0) . "</span>
				</div>
			</div>
		
";
	}
	$_ips___x_retval .= '';
	unset( $__iteratorCount );
	return $_ips___x_retval;
}

/* -- passwordChangeForm --*/
function passwordChangeForm() {
$IPBHTML = "";
if( IPSLib::locationHasHooks( 'skin_ucp', $this->_funcHooks['passwordChangeForm'] ) )
{
$count_e56ce3f3c9978fcf399b84d7212be98a = is_array($this->functionData['passwordChangeForm']) ? count($this->functionData['passwordChangeForm']) : 0;
}
$IPBHTML .= "<fieldset class='row1'>
	<h3>{$this->lang->words['account_pass_title']}</h3>
	<br />
	<p class='message unspecific'>
		" . (($this->memberData['g_access_cp']) ? ("
			{$this->lang->words['admin_emailpassword']}
		") : ("
			{$this->lang->words['pass_change_text']}
		")) . "
	</p>
	
	" . ((!$this->memberData['g_access_cp']) ? ("
		<ul>
			<li class='field'>
				<label for='current_pass'>{$this->lang->words['account_pass_old']}</label>
				<input type=\"password\" name=\"current_pass\" value=\"\" id='current_pass' class='input_text' />
			</li>
			<li class='field'>
				<label for='new_pass_1'>{$this->lang->words['account_pass_new']}</label>
				<input type=\"password\" name=\"new_pass_1\" value=\"\" id='new_pass_1' class='input_text' />
			</li>
			<li class='field'>
				<label for='new_pass_2'>{$this->lang->words['account_pass_new2']}</label>
				<input type=\"password\" name=\"new_pass_2\" value=\"\" id='new_pass_2' class='input_text' />
			</li>
		</ul>
	") : ("")) . "
</fieldset>";
return $IPBHTML;
}

/* -- Show_attachments --*/
function Show_attachments($data="") {
$IPBHTML = "";
$IPBHTML .= "<a href=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "act=attach&amp;type={$data['type']}&amp;id={$data['attach_id']}", "public",'' ), "", "" ) . "\" title=\"{$this->lang->words['attach_dl']}\" target=\"_blank\"><img src=\"{$this->settings['mime_img']}/{$data['mime_image']}\" alt=\"{$this->lang->words['attached_file']}\" /></a>
&nbsp;<a href=\"" . $this->registry->getClass('output')->formatUrl( $this->registry->getClass('output')->buildUrl( "act=attach&amp;type={$data['type']}&amp;id={$data['attach_id']}", "public",'' ), "", "" ) . "\" title=\"{$this->lang->words['attach_dl']}\" target=\"_blank\">{$data['attach_file']}</a> ( {$data['file_size']} )
<span class=\"desc\">{$this->lang->words['attach_hits']}: {$data['attach_hits']}</span><br />";
return $IPBHTML;
}

/* -- showNotification --*/
function showNotification($notification) {
$IPBHTML = "";
$IPBHTML .= "<!--no data in this master skin-->";
return $IPBHTML;
}

/* -- userCPTemplate --*/
function userCPTemplate($current_tab, $html, $tabs, $current_area, $errors=array(), $hide_form=0, $maxUpload=0) {
$IPBHTML = "";
$IPBHTML .= "{$html}";
return $IPBHTML;
}


}


/*--------------------------------------------------*/
/* END OF FILE                                      */
/*--------------------------------------------------*/

?>